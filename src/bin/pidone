#!/usr/bin/python2 -u
# All credit to Phusion for writing the original script

import os
import os.path
import sys
import stat
import signal
import errno
import time

KILL_PROCESS_TIMEOUT = 5
KILL_ALL_PROCESSES_TIMEOUT = 5

LOG_LEVEL_ERROR = 1
LOG_LEVEL_WARN = 1
LOG_LEVEL_INFO = 2
LOG_LEVEL_DEBUG = 3

log_level = None

terminated_child_processes = {}


class AlarmException(Exception):
        pass


def error(message):
    if log_level >= LOG_LEVEL_ERROR:
        sys.stderr.write("*** %s\n" % message)


def warn(message):
    if log_level >= LOG_LEVEL_WARN:
        sys.stderr.write("*** %s\n" % message)


def info(message):
    if log_level >= LOG_LEVEL_INFO:
        sys.stderr.write("*** %s\n" % message)


def debug(message):
    if log_level >= LOG_LEVEL_DEBUG:
        sys.stderr.write("*** %s\n" % message)


def ignore_signals_and_raise_keyboard_interrupt(signame):
    signal.signal(signal.SIGTERM, signal.SIG_IGN)
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    raise KeyboardInterrupt(signame)


def raise_alarm_exception():
    raise AlarmException('Alarm')


def listdir(path):
    try:
        result = os.stat(path)
    except OSError:
        return []
    if stat.S_ISDIR(result.st_mode):
        return sorted(os.listdir(path))
    else:
        return []


def is_exe(path):
    try:
        return os.path.isfile(path) and os.access(path, os.X_OK)
    except OSError:
        return False


def shquote(s):
    """Return a shell-escaped version of the string *s*."""
    if not s:
        return "''"

    return "'" + s.replace("'", "'\"'\"'") + "'"


def waitpid_reap_other_children(pid):
    global terminated_child_processes
    status = terminated_child_processes.get(pid)
    if status:
        del terminated_child_processes[pid]
        return status
    done = False
    status = None
    while not done:
        try:
            this_pid, status = os.waitpid(-1, 0)
            if this_pid == pid:
                done = True
            else:
                terminated_child_processes[this_pid] = status
        except OSError as e:
            if e.errno == errno.ECHILD or e.errno == errno.ESRCH:
                return None
            else:
                raise
    return status


def stop_child_process(name,
                       pid,
                       signo=signal.SIGTERM,
                       time_limit=KILL_PROCESS_TIMEOUT
                       ):
    info("Shutting down %s (PID %d)..." % (name, pid))
    try:
        os.kill(pid, signo)
    except OSError:
        pass
    signal.alarm(time_limit)
    try:
        try:
            waitpid_reap_other_children(pid)
        except OSError:
            pass
    except AlarmException:
        warn(
            "%s (PID %d) did not shut down in time. Forcing it to exit." %
            (name, pid)
        )
        try:
            os.kill(pid, signal.SIGKILL)
        except OSError:
            pass
        try:
            waitpid_reap_other_children(pid)
        except OSError:
            pass
    finally:
        signal.alarm(0)


def run_command_killable(*argv):
    filename = argv[0]
    status = None
    pid = os.spawnvp(os.P_NOWAIT, filename, argv)
    try:
        status = waitpid_reap_other_children(pid)
    except BaseException:
        warn("An error occurred. Aborting.")
        stop_child_process(filename, pid)
        raise
    if status != 0:
        if status is None:
            error(
                "%s exited with unknown status\n" %
                filename
            )
        else:
            error(
                "%s failed with status %d\n" %
                (filename, os.WEXITSTATUS(status))
            )
        sys.exit(1)


def kill_all_processes(time_limit):
    info("Killing all processes...")
    try:
        os.kill(-1, signal.SIGTERM)
    except OSError:
        pass
    signal.alarm(time_limit)
    try:
        # Wait until no more child processes exist.
        done = False
        while not done:
            try:
                os.waitpid(-1, 0)
            except OSError as e:
                if e.errno == errno.ECHILD:
                    done = True
                else:
                    raise
    except AlarmException:
        warn("Not all processes have exited in time. Forcing them to exit.")
        try:
            os.kill(-1, signal.SIGKILL)
        except OSError:
            pass
    finally:
        signal.alarm(0)


def run_startup_files():
    # Run /etc/my_init.d/*
    for name in listdir("/etc/docker.init.d"):
        filename = "/etc/docker.init.d/" + name
        if is_exe(filename):
            info("Running %s..." % filename)
            run_command_killable(filename)


def start_runit():
    info("Booting runit daemon...")
    pid = os.spawnlp(os.P_NOWAIT, "runsvdir", "runsvdir", "-P", "/etc/service")
    info("Runit started as PID %d" % pid)
    return pid


def wait_for_runit_or_interrupt(pid):
    try:
        status = waitpid_reap_other_children(pid)
        return (True, status)
    except KeyboardInterrupt:
        return (False, None)


def shutdown_runit_services():
    debug("Begin shutting down runit services...")
    os.system("sv down /etc/service/*")


def wait_for_runit_services():
    debug("Waiting for runit services to exit...")
    done = False
    while not done:
        done = os.system("sv status /etc/service/* | grep -q '^run:'") != 0
        time.sleep(0.1)


def main(args):
    run_startup_files()
    runit_exited = False
    exit_code = None
    runit_pid = start_runit()

    try:
        exit_status = None
        if len(args) == 0 or args[0] == "--":
            runit_exited, exit_code = wait_for_runit_or_interrupt(runit_pid)
            if runit_exited:
                if exit_code is None:
                    info("Runit exited with unknown status")
                    exit_status = 1
                else:
                    exit_status = os.WEXITSTATUS(exit_code)
                    info("Runit exited with status %d" % exit_status)

        else:
            info("Running %s..." % ' '.join(args))
            pid = os.spawnvp(os.P_NOWAIT, args[0], args)
            try:
                exit_code = waitpid_reap_other_children(pid)
                if exit_code is None:
                    info("%s exited with unknown status." % args[0])
                    exit_status = 1
                else:
                    exit_status = os.WEXITSTATUS(exit_code)
                    info("%s exited with status %d." % (args[0], exit_status))
            except KeyboardInterrupt:
                stop_child_process(args[0], pid)
                raise
            except BaseException:
                warn("An error occurred. Aborting.")
                stop_child_process(args[0], pid)
                raise
        sys.exit(exit_status)
    finally:
        shutdown_runit_services()
        if not runit_exited:
            stop_child_process("runit daemon", runit_pid)
        wait_for_runit_services()


if __name__ == "__main__":
    log_level = 'debug'

    args = sys.argv[1::]

    signal.signal(
        signal.SIGTERM,
        lambda signum,
        frame: ignore_signals_and_raise_keyboard_interrupt('SIGTERM')
    )

    signal.signal(
        signal.SIGINT,
        lambda signum,
        frame: ignore_signals_and_raise_keyboard_interrupt('SIGINT')
    )

    signal.signal(
        signal.SIGALRM,
        lambda signum,
        frame: raise_alarm_exception()
    )

    try:
        main(args)

    except KeyboardInterrupt:
        warn("Caught interrupt signal. Exiting.")
        exit(2)

    finally:
        kill_all_processes(KILL_ALL_PROCESSES_TIMEOUT)
